using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Net.Mail;

namespace LeapProject_4
{
    class Program
    {
        
        static void Main(string[] args)
        {

            string fileName = "SystemOut.log";
            string newfileName = "NewSystemOut.txt";
            string sourcePath = @"D:\\Program Files\\IBM\\WebSphere\\AppServer\\profiles\\AppSrv01\\logs\\HDI-Model-AppSvr01";
            string targetPath = @"D:\\LeapProject\\LogFile";

            CopyFile(fileName, sourcePath, targetPath, newfileName);

            
        }

        public static void CopyFile(string FileName, string SourcePath, string TargetPath, string NewFileName)
        {


            // Use Path class to manipulate file and directory paths.
            string sourceFile = System.IO.Path.Combine(SourcePath, FileName);
            string destFile = System.IO.Path.Combine(TargetPath, FileName);

            // To copy a file to another location and 
            // overwrite the destination file if it already exists.
            System.IO.File.Copy(sourceFile, destFile, true);

            ReadTextFile(TargetPath ,FileName, NewFileName);
        }

        public static void ReadTextFile(string SysOutPath,  string SysOutFileName, string NewSysOutFileName)
        {
            // Read each line of the file into a string array. 
            // Each element of the array is one line of the file.
            List<ListModel> List = new List<ListModel>();

            //combining System out file path and the file name
            string SourceSysOut = System.IO.Path.Combine(SysOutPath, SysOutFileName);

            string[] lines = System.IO.File.ReadAllLines(SourceSysOut);
            foreach (var line in lines)
            {
                if (line.Trim() != "")
                {
                    ListModel list = new ListModel();
                    list.Line = line;
                    if (IsDate(line.Substring(1, 12))) //[01/01/2018] date format 
                    {
                        list.isFirstLine = true;
                        if (line.ToLower().Contains("error"))
                        {
                            list.isException = true;
                        }
                    }

                    List.Add(list);
                }

            }

            //combining new systemout path and the new file name
            string NewPathFile = System.IO.Path.Combine(SysOutPath, NewSysOutFileName);
            StreamWriter writer = new StreamWriter(NewPathFile, true);
            DisplayException(List, writer);
            writer.Close();

            if (new FileInfo(NewPathFile).Length < 30)
            {
                File.Delete(NewPathFile);
                //Console.WriteLine("No error");
            }
            else
            {
                //Console.WriteLine("Error");
                //SendMail(NewPathFile);
            }
        }

        public static void SendMail(String FilePath)
        {
            string body = File.ReadAllText(FilePath);

            MailMessage mail = new MailMessage("form@domain.com", "to@domain.com");
            SmtpClient client = new SmtpClient();
            client.Port = 25;
            client.DeliveryMethod = SmtpDeliveryMethod.Network;
            client.UseDefaultCredentials = false;
            client.Host = "smtp.tenethealth.net";
            mail.Subject = "log";

            // Set the read file as the body of the message
            mail.Body = body;
            client.Send(mail);
        }

        public static bool IsDate(Object obj)
        {
            string strDate = obj.ToString();
            try
            {
                DateTime dt = DateTime.Parse(strDate);
                return true;
            }
            catch
            {
                return false;
            }
        }
        public static void DisplayException(List<ListModel> list, StreamWriter writer)
        {
            for (int i = 0; i < list.Count; i++)
            {
                string exceptionMsg = "";

                if (list[i].isException && list[i].isFirstLine)
                {
                    exceptionMsg = list[i].Line;
                }
                writer.WriteLine(exceptionMsg);

            }
        }
        public class ListModel
        {
            public string Line { get; set; }
            public bool isFirstLine { get; set; }
            public bool isException { get; set; }
        }
    }
}

